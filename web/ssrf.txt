SSRF -server side request forgery

ssrf can be found in 

1. when full url is used in parameter address bar - 
		|_https://website.com/form?server=https://local.website.com/store

2. hidden field in a form (source code):
	< form method="post" action="/form">
              <input type="hidden" name="server" value="http://server website.thm/store">
 			 <div>Your Name:</div>
 			 <div><input name="client_name"></div>
			<div>Your Email:</div>
			<div><input name="client_email"></div>
			<div>Your Message:</div>
			<div><textarea name="client _message"*</textarea></div>
         </form>

3. a partial url such as just the hostname :
	https://website.com/form?server=api

4.  perhaps only the path of the url
	https://website.com/form?server=/form/contact


here i have to do path traversal
check source code
check url paths
form fields in source code
url parameters




*** Defending common SSRF defenses

+ deny list - where all request are accepted apart from resources specified in a list of matching a particular pattern.
		ex) 127.0.0.1 , 0.0.0.0, 8.8.8.8 , etc. this can be restricted.
Attackers can bypass a Deny List by using alternative localhost references such as 0, 0.0.0.0, 0000, 127.1, 127.*.*.*, 2130706433, 017700000001 or subdomains that have a DNS record which resolves to the IP Address 127.0.0.1 such as 127.0.0.1.nip.io.

  /* In a cloud environment, it would be beneficial to block access to the IP address 169.254.169.254, which contains metadata for the deployed cloud server, including possibly sensitive information. An attacker can bypass this by registering a subdomain on their own domain with a DNS record that points to the IP Address 169.254.169.254. */


+ Allow List - where all request get denied unless they appear on a list or match a particular pattern.
         
An attacker could quickly circumvent this rule by creating a subdomain on an attacker's domain name, such as https://website.thm.attackers-domain.thm. The application logic would now allow this input and let an attacker control the internal HTTP request.

