1. find subdomains 
       |_find live subdomains using httprobe,httpx-toolkit.
           |_use gowitness for screenshots of live subdomains. --> cmd :: gowitness scan file -f subdomains.txt						|_check for subdomain takeover using(sub404).
		|_check for status 403 forbidden(access denied) subdomains for bypass.
			|_use 403 bypass tool from burp or GitHub.
 		
2. find js files using subjs.
       |_check for secrets in that js files. (subjs, katana)
		|_mantra/Secretefinder/trufflehog for finding secretes in it.
			|_find api_keys,Access _keys or any sensitive information, etc.
				|_also use  "enumerateiam , maps__api_scanner"
					|_check for endpoint and then take action according to it - like https://example.com/api/v0.1/resources
						|
						|	
 					       \/ 
		---------[https://github.com/streaak/keyhacks.git]-----------tools for validate api keys.
					

3. ASN(autonomous number system):
   After finding Autonomous System Numbers (ASNs), you can use them to gain insights into an organization's network infrastructure, identify potential attack surfaces, and conduct further reconnaissance.

   find ASN(autonomous number system) numbers using asnmap tool.
	|_find IP ranges associated with an ASN. ---- Hurricane Electric BGP Tool (bgp.he.net)
	|                                             |_curl https://ipinfo.io/ASXXXX
	|
	|_Port Scanning and Service Discovery.

	|	|_nmap -p 1-65535 -T4 -A -v <IP_RANGE>
	|	|_masscan <IP_RANGE> -p1-65535 --rate=10000
	|
	|_Monitoring the Network (Threat Intelligence) --- monitor changes in an organizationâ€™s IP infrastructure
	|	|_BGPmon, IPinfo, or Shodan
	|
	|_Find Subdomains
		|_amass intel -asn ASXXXX

4. check for xss
	|
	|_ find parameterized URLs for trying xss payloads, also for blind xss.
	
5. check for CSRF- cross sight request forgery
	|
	|_ create a two account and try different method.
		|_ reference portswigger.

6. information disclosure 
	|
	|_ check for path traversal ... might be get some system credentials.
	|_ check for different extension files like .bak.

7. Command injection Bypass
    |	|
    |	|_ URL encoding, base64
    |	|_ whitespaces obfuscation 
    |	|_ command obfuscation 
    | 
    |_Prevention
	|_ User input validation and parameterized queries.
    	|_ Implementing least privilege.
	|_ Correctly escaping and quoting user inputs.
	|_ Conducting regular security audits
	|_ Deploying intrusion detection Systems.

8. Check for exif data in image uploaded in web app
9. Check for password strength checker. like not to use special character, symbols, or sometimes only single digit password.

10. IDOR checking at API requests.

11. check for ssl rating on ssllabs website - https://www.ssllabs.com/ssltest

12. file upload bug
	|_ check for uploading documents e.g) profile photo,file,document then add some simple payload code executable file.

13. server side templet injection - add {{3*8}} like payloads in input fields.


							 # TRYHACKME web fundamentals learning path

14. authentication bypass - 
	|_ password reset link
		|
	        |
		v

1. What is a key in query strings and POST data?

    A key is the name of a parameter in the query string or POST data.
    Example:
        Query string: ?email=user@example.com
            Key: email
            Value: user@example.com
        POST data:

        email=attacker@example.com

            Key: email
            Value: attacker@example.com

2. How the same key can exist in both?

The same key can exist in two different sources (query string and POST data) when the application processes both types of data simultaneously:
Example:

    Query string URL provided to the application:

https://example.com/reset_password.php?email=user@example.com

    Here, the key is email and the value is user@example.com.

Attacker submits a POST request to the same URL with different data:

    POST /reset_password.php?email=user@example.com HTTP/1.1
    Content-Type: application/x-www-form-urlencoded

    email=attacker@example.com

    In this case:
        Query string key: email=user@example.com
        POST key: email=attacker@example.com

Both use the same key: email, but have different values.

3. Why does PHP prefer POST data?

In PHP, when both GET (query string) and POST data are combined into $_REQUEST, POST data takes priority. This is a built-in behavior.

    $_REQUEST['email'] will return the POST value (attacker@example.com) instead of the query string value (user@example.com).

4. Impact of Same Key Issue

In a poorly implemented application:

    The application might expect to use the query string value for the email (user@example.com).
    However, since $_REQUEST prefers POST data, the application ends up using the POST value (attacker@example.com) instead.
    This allows the attacker to manipulate sensitive behavior, such as sending a password reset email to their email address.

5. How to Avoid This Issue?

    Avoid using $_REQUEST. Instead, use $_GET explicitly for query string data and $_POST for form submissions.
    Validate and sanitize all user inputs. For example:
        If the email is supposed to come from the query string, ensure you're using $_GET['email'].
        Cross-check the email value with the user account in the database to confirm authenticity.

